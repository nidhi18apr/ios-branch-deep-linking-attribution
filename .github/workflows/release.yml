name: Build & Release (manual)

# Manually triggered
# $ gh workflow run release.yml
on: 
  workflow_dispatch:

# Builds four frameworks in parallel, then commits checksums
# releases with the frameworks and checksums attached to the release.
jobs:
  access_spm:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Run Workflow on SPM Repo
        run: |
          curl -X POST https://api.github.com/repos/nidhi18apr/ios-branch-sdk-spm/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.TEST_ACTION_SECRET }} \
          --data '{"event_type": "Trigger Workflow", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'" }}'
  build:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build xcframework
        working-directory: carthage-files
        run: |
          xcodebuild -scheme Branch-xcframework
          cd build
          zip -rqy Branch.zip Branch.xcframework/
          echo '#checksum for Branch.zip on Github' > checksum
          shasum Branch.zip >> checksum
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: framework
          path: |
            carthage-files/build/Branch.zip
            carthage-files/build/checksum

  build-noidfa:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build xcframework
        working-directory: carthage-files
        run: |
          xcodebuild -scheme Branch-xcframework-noidfa
          cd build
          zip -rqy Branch_noidfa.zip Branch.xcframework/
          echo '#checksum for Branch_noidfa.zip on Github' > checksum_noidfa
          shasum Branch_noidfa.zip >> checksum_noidfa
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: framework-noidfa
          path: |
            carthage-files/build/Branch_noidfa.zip
            carthage-files/build/checksum_noidfa

  build-static:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build static xcframework
        working-directory: carthage-files
        run: |
          xcodebuild -scheme Branch-static-xcframework
          cd build
          zip -rqy Branch_static.zip Branch.xcframework/
          echo '#checksum for Branch_static.zip on Github' > checksum_static
          shasum Branch_static.zip >> checksum_static
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: static-framework
          path: |
            carthage-files/build/Branch_static.zip
            carthage-files/build/checksum_static

  build-static-noidfa:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build static xcframework
        working-directory: carthage-files
        run: |
          xcodebuild -scheme Branch-static-xcframework-noidfa
          cd build
          zip -rqy Branch_static_noidfa.zip Branch.xcframework/
          echo '#checksum for Branch_static_noidfa.zip on Github' > checksum_static_noidfa
          shasum Branch_static_noidfa.zip >> checksum_static_noidfa
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: static-framework-noidfa
          path: |
            carthage-files/build/Branch_static_noidfa.zip
            carthage-files/build/checksum_static_noidfa

  release:
    runs-on: macos-latest
    needs: [build, build-static]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Ruby 2.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
      # The CocoaPods dependencies are only used by the
      # Branch-TestBed.xcworkspace (for unit tests).
      # Bring in the Ruby deps from the cache for quick availability of
      # pod command. Not using cached Pods folder.
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            vendor
            Branch-TestBed/Pods
          key: ${{ runner.os }}-${{ hashFiles('Gemfile.lock','Branch-TestBed/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-
      - name: Install Ruby dependencies
        run: |
          bundle config set --local path vendor
          bundle check || bundle install
      - name: Download build artifacts
        uses: actions/download-artifact@v2
      - name: Relocate checksum artifacts
        run: |
          cp framework/checksum carthage-files
          cp framework-noidfa/checksum_noidfa carthage-files
          cp static-framework/checksum_static carthage-files
          cp static-framework-noidfa/checksum_static_noidfa carthage-files
      # The sha output from this step is the commit to be tagged.
      - name: Commit checksums
        id: commit-checksums
        run: |
          git config user.name "Branch SDK Team"
          git config user.email branch-sdks@branch.io
          git add carthage-files/checksum carthage-files/checksum_noidfa carthage-files/checksum_static carthage-files/checksum_static_noidfa
          git commit carthage-files/checksum carthage-files/checksum_noidfa carthage-files/checksum_static carthage-files/checksum_static_noidfa -m'Updated checksums'
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      # TODO: Version bump along the way, probably here.
      - name: Push changes
        run: |
          git push
      - name: Publish to CocoaPods
        run: |
          # TODO: Authenticate using repo secret
          # bundle exec pod trunk push Branch.podspec
          echo "TODO: This ðŸ‘†"
      # 3. Create GitHub release. Also creates a tag.
      - name: Get current version
        id: get-version
        run: |
          bundle exec fastlane current_version
          echo "Current version is $(cat fastlane/.version)."
          echo "version=$(cat fastlane/.version)" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: actions/github-script@v4
        with:
          script: |
            const createRelease = require('./.github/custom-scripts/create-release');
            const tagName = '${{ steps.get-version.outputs.version }}';
            const sha = '${{ steps.commit-checksums.outputs.sha }}';
            await createRelease({
              core,
              context,
              github,
              sha,
              version: tagName,
            });
      - name: Upload Release Assets
        uses: actions/github-script@v4
        with:
          script: |
            const uploadAsset = require('./.github/custom-scripts/upload-asset');
            const tagName = '${{ steps.get-version.outputs.version }}';

            const { data } = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tagName,
            });

            const releaseId = data.id;

            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'Branch.zip',
              path: 'framework/Branch.zip',
            });
            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'Branch_noidfa.zip',
              path: 'framework-noidfa/Branch_noidfa.zip',
            });
            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'Branch_static.zip',
              path: 'static-framework/Branch_static.zip',
            });
            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'Branch_static_noidfa.zip',
              path: 'static-framework-noidfa/Branch_static_noidfa.zip',
            });
            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'checksum',
              path: 'framework/checksum',
            });
            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'checksum_noidfa',
              path: 'framework-noidfa/checksum_noidfa',
            });
            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'checksum_static',
              path: 'static-framework/checksum_static',
            });
            await uploadAsset({
              github,
              context,
              releaseId,
              assetName: 'checksum_static_noidfa',
              path: 'static-framework-noidfa/checksum_static_noidfa',
            });
      - name: Report Release
        uses: actions/github-script@v4
        with:
          script: |
            console.log('Created release ${{ steps.get-version.outputs.version }}:');
            console.log(` https://github.com/${context.repo.owner}/${context.repo.repo}/releases/${{ steps.get-version.outputs.version }}`);
      # 4. Trigger import workflow in ios-spm repo.
      - name: Export to ios-spm repository
        uses: actions/github-script@v4
        with:
          script: |
            console.log('TODO: This ðŸ‘†');
